// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package instancetest

import (
	"context"
	"sync"
)

var (
	lockStoreMockUpdateInstanceWithHierarchyBuilt sync.RWMutex
)

// StoreMock is a mock implementation of Store.
//
//     func TestSomethingThatUsesStore(t *testing.T) {
//
//         // make and configure a mocked Store
//         mockedStore := &StoreMock{
//             UpdateInstanceWithHierarchyBuiltFunc: func(ctx context.Context, instanceID string, dimensionID string) (bool, error) {
// 	               panic("TODO: mock out the UpdateInstanceWithHierarchyBuilt method")
//             },
//         }
//
//         // TODO: use mockedStore in code that requires Store
//         //       and then make assertions.
//
//     }
type StoreMock struct {
	// UpdateInstanceWithHierarchyBuiltFunc mocks the UpdateInstanceWithHierarchyBuilt method.
	UpdateInstanceWithHierarchyBuiltFunc func(ctx context.Context, instanceID string, dimensionID string) (bool, error)

	// calls tracks calls to the methods.
	calls struct {
		// UpdateInstanceWithHierarchyBuilt holds details about calls to the UpdateInstanceWithHierarchyBuilt method.
		UpdateInstanceWithHierarchyBuilt []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// InstanceID is the instanceID argument value.
			InstanceID string
			// DimensionID is the dimensionID argument value.
			DimensionID string
		}
	}
}

// UpdateInstanceWithHierarchyBuilt calls UpdateInstanceWithHierarchyBuiltFunc.
func (mock *StoreMock) UpdateInstanceWithHierarchyBuilt(ctx context.Context, instanceID string, dimensionID string) (bool, error) {
	if mock.UpdateInstanceWithHierarchyBuiltFunc == nil {
		panic("moq: StoreMock.UpdateInstanceWithHierarchyBuiltFunc is nil but Store.UpdateInstanceWithHierarchyBuilt was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		InstanceID  string
		DimensionID string
	}{
		Ctx:         ctx,
		InstanceID:  instanceID,
		DimensionID: dimensionID,
	}
	lockStoreMockUpdateInstanceWithHierarchyBuilt.Lock()
	mock.calls.UpdateInstanceWithHierarchyBuilt = append(mock.calls.UpdateInstanceWithHierarchyBuilt, callInfo)
	lockStoreMockUpdateInstanceWithHierarchyBuilt.Unlock()
	return mock.UpdateInstanceWithHierarchyBuiltFunc(ctx, instanceID, dimensionID)
}

// UpdateInstanceWithHierarchyBuiltCalls gets all the calls that were made to UpdateInstanceWithHierarchyBuilt.
// Check the length with:
//     len(mockedStore.UpdateInstanceWithHierarchyBuiltCalls())
func (mock *StoreMock) UpdateInstanceWithHierarchyBuiltCalls() []struct {
	Ctx         context.Context
	InstanceID  string
	DimensionID string
} {
	var calls []struct {
		Ctx         context.Context
		InstanceID  string
		DimensionID string
	}
	lockStoreMockUpdateInstanceWithHierarchyBuilt.RLock()
	calls = mock.calls.UpdateInstanceWithHierarchyBuilt
	lockStoreMockUpdateInstanceWithHierarchyBuilt.RUnlock()
	return calls
}
