// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dp-api-clients-go/dataset"
	"github.com/ONSdigital/dp-healthcheck/healthcheck"
	"github.com/ONSdigital/dp-import-tracker/api"
	"net/url"
	"sync"
)

// Ensure, that DatasetClientMock does implement api.DatasetClient.
// If this is not the case, regenerate this file with moq.
var _ api.DatasetClient = &DatasetClientMock{}

// DatasetClientMock is a mock implementation of api.DatasetClient.
//
//     func TestSomethingThatUsesDatasetClient(t *testing.T) {
//
//         // make and configure a mocked api.DatasetClient
//         mockedDatasetClient := &DatasetClientMock{
//             CheckerFunc: func(ctx context.Context, check *healthcheck.CheckState) error {
// 	               panic("mock out the Checker method")
//             },
//             GetInstanceFunc: func(ctx context.Context, userAuthToken string, serviceAuthToken string, collectionID string, instanceID string) (dataset.Instance, error) {
// 	               panic("mock out the GetInstance method")
//             },
//             GetInstancesInBatchesFunc: func(ctx context.Context, userAuthToken string, serviceAuthToken string, collectionID string, vars url.Values, batchSize int, maxWorkers int) (dataset.Instances, error) {
// 	               panic("mock out the GetInstancesInBatches method")
//             },
//             PutInstanceImportTasksFunc: func(ctx context.Context, serviceAuthToken string, instanceID string, data dataset.InstanceImportTasks) error {
// 	               panic("mock out the PutInstanceImportTasks method")
//             },
//             PutInstanceStateFunc: func(ctx context.Context, serviceAuthToken string, instanceID string, state dataset.State) error {
// 	               panic("mock out the PutInstanceState method")
//             },
//             UpdateInstanceWithNewInsertsFunc: func(ctx context.Context, serviceAuthToken string, instanceID string, observationsInserted int32) error {
// 	               panic("mock out the UpdateInstanceWithNewInserts method")
//             },
//         }
//
//         // use mockedDatasetClient in code that requires api.DatasetClient
//         // and then make assertions.
//
//     }
type DatasetClientMock struct {
	// CheckerFunc mocks the Checker method.
	CheckerFunc func(ctx context.Context, check *healthcheck.CheckState) error

	// GetInstanceFunc mocks the GetInstance method.
	GetInstanceFunc func(ctx context.Context, userAuthToken string, serviceAuthToken string, collectionID string, instanceID string) (dataset.Instance, error)

	// GetInstancesInBatchesFunc mocks the GetInstancesInBatches method.
	GetInstancesInBatchesFunc func(ctx context.Context, userAuthToken string, serviceAuthToken string, collectionID string, vars url.Values, batchSize int, maxWorkers int) (dataset.Instances, error)

	// PutInstanceImportTasksFunc mocks the PutInstanceImportTasks method.
	PutInstanceImportTasksFunc func(ctx context.Context, serviceAuthToken string, instanceID string, data dataset.InstanceImportTasks) error

	// PutInstanceStateFunc mocks the PutInstanceState method.
	PutInstanceStateFunc func(ctx context.Context, serviceAuthToken string, instanceID string, state dataset.State) error

	// UpdateInstanceWithNewInsertsFunc mocks the UpdateInstanceWithNewInserts method.
	UpdateInstanceWithNewInsertsFunc func(ctx context.Context, serviceAuthToken string, instanceID string, observationsInserted int32) error

	// calls tracks calls to the methods.
	calls struct {
		// Checker holds details about calls to the Checker method.
		Checker []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Check is the check argument value.
			Check *healthcheck.CheckState
		}
		// GetInstance holds details about calls to the GetInstance method.
		GetInstance []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserAuthToken is the userAuthToken argument value.
			UserAuthToken string
			// ServiceAuthToken is the serviceAuthToken argument value.
			ServiceAuthToken string
			// CollectionID is the collectionID argument value.
			CollectionID string
			// InstanceID is the instanceID argument value.
			InstanceID string
		}
		// GetInstancesInBatches holds details about calls to the GetInstancesInBatches method.
		GetInstancesInBatches []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserAuthToken is the userAuthToken argument value.
			UserAuthToken string
			// ServiceAuthToken is the serviceAuthToken argument value.
			ServiceAuthToken string
			// CollectionID is the collectionID argument value.
			CollectionID string
			// Vars is the vars argument value.
			Vars url.Values
			// BatchSize is the batchSize argument value.
			BatchSize int
			// MaxWorkers is the maxWorkers argument value.
			MaxWorkers int
		}
		// PutInstanceImportTasks holds details about calls to the PutInstanceImportTasks method.
		PutInstanceImportTasks []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ServiceAuthToken is the serviceAuthToken argument value.
			ServiceAuthToken string
			// InstanceID is the instanceID argument value.
			InstanceID string
			// Data is the data argument value.
			Data dataset.InstanceImportTasks
		}
		// PutInstanceState holds details about calls to the PutInstanceState method.
		PutInstanceState []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ServiceAuthToken is the serviceAuthToken argument value.
			ServiceAuthToken string
			// InstanceID is the instanceID argument value.
			InstanceID string
			// State is the state argument value.
			State dataset.State
		}
		// UpdateInstanceWithNewInserts holds details about calls to the UpdateInstanceWithNewInserts method.
		UpdateInstanceWithNewInserts []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ServiceAuthToken is the serviceAuthToken argument value.
			ServiceAuthToken string
			// InstanceID is the instanceID argument value.
			InstanceID string
			// ObservationsInserted is the observationsInserted argument value.
			ObservationsInserted int32
		}
	}
	lockChecker                      sync.RWMutex
	lockGetInstance                  sync.RWMutex
	lockGetInstancesInBatches        sync.RWMutex
	lockPutInstanceImportTasks       sync.RWMutex
	lockPutInstanceState             sync.RWMutex
	lockUpdateInstanceWithNewInserts sync.RWMutex
}

// Checker calls CheckerFunc.
func (mock *DatasetClientMock) Checker(ctx context.Context, check *healthcheck.CheckState) error {
	if mock.CheckerFunc == nil {
		panic("DatasetClientMock.CheckerFunc: method is nil but DatasetClient.Checker was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Check *healthcheck.CheckState
	}{
		Ctx:   ctx,
		Check: check,
	}
	mock.lockChecker.Lock()
	mock.calls.Checker = append(mock.calls.Checker, callInfo)
	mock.lockChecker.Unlock()
	return mock.CheckerFunc(ctx, check)
}

// CheckerCalls gets all the calls that were made to Checker.
// Check the length with:
//     len(mockedDatasetClient.CheckerCalls())
func (mock *DatasetClientMock) CheckerCalls() []struct {
	Ctx   context.Context
	Check *healthcheck.CheckState
} {
	var calls []struct {
		Ctx   context.Context
		Check *healthcheck.CheckState
	}
	mock.lockChecker.RLock()
	calls = mock.calls.Checker
	mock.lockChecker.RUnlock()
	return calls
}

// GetInstance calls GetInstanceFunc.
func (mock *DatasetClientMock) GetInstance(ctx context.Context, userAuthToken string, serviceAuthToken string, collectionID string, instanceID string) (dataset.Instance, error) {
	if mock.GetInstanceFunc == nil {
		panic("DatasetClientMock.GetInstanceFunc: method is nil but DatasetClient.GetInstance was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		UserAuthToken    string
		ServiceAuthToken string
		CollectionID     string
		InstanceID       string
	}{
		Ctx:              ctx,
		UserAuthToken:    userAuthToken,
		ServiceAuthToken: serviceAuthToken,
		CollectionID:     collectionID,
		InstanceID:       instanceID,
	}
	mock.lockGetInstance.Lock()
	mock.calls.GetInstance = append(mock.calls.GetInstance, callInfo)
	mock.lockGetInstance.Unlock()
	return mock.GetInstanceFunc(ctx, userAuthToken, serviceAuthToken, collectionID, instanceID)
}

// GetInstanceCalls gets all the calls that were made to GetInstance.
// Check the length with:
//     len(mockedDatasetClient.GetInstanceCalls())
func (mock *DatasetClientMock) GetInstanceCalls() []struct {
	Ctx              context.Context
	UserAuthToken    string
	ServiceAuthToken string
	CollectionID     string
	InstanceID       string
} {
	var calls []struct {
		Ctx              context.Context
		UserAuthToken    string
		ServiceAuthToken string
		CollectionID     string
		InstanceID       string
	}
	mock.lockGetInstance.RLock()
	calls = mock.calls.GetInstance
	mock.lockGetInstance.RUnlock()
	return calls
}

// GetInstancesInBatches calls GetInstancesInBatchesFunc.
func (mock *DatasetClientMock) GetInstancesInBatches(ctx context.Context, userAuthToken string, serviceAuthToken string, collectionID string, vars url.Values, batchSize int, maxWorkers int) (dataset.Instances, error) {
	if mock.GetInstancesInBatchesFunc == nil {
		panic("DatasetClientMock.GetInstancesInBatchesFunc: method is nil but DatasetClient.GetInstancesInBatches was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		UserAuthToken    string
		ServiceAuthToken string
		CollectionID     string
		Vars             url.Values
		BatchSize        int
		MaxWorkers       int
	}{
		Ctx:              ctx,
		UserAuthToken:    userAuthToken,
		ServiceAuthToken: serviceAuthToken,
		CollectionID:     collectionID,
		Vars:             vars,
		BatchSize:        batchSize,
		MaxWorkers:       maxWorkers,
	}
	mock.lockGetInstancesInBatches.Lock()
	mock.calls.GetInstancesInBatches = append(mock.calls.GetInstancesInBatches, callInfo)
	mock.lockGetInstancesInBatches.Unlock()
	return mock.GetInstancesInBatchesFunc(ctx, userAuthToken, serviceAuthToken, collectionID, vars, batchSize, maxWorkers)
}

// GetInstancesInBatchesCalls gets all the calls that were made to GetInstancesInBatches.
// Check the length with:
//     len(mockedDatasetClient.GetInstancesInBatchesCalls())
func (mock *DatasetClientMock) GetInstancesInBatchesCalls() []struct {
	Ctx              context.Context
	UserAuthToken    string
	ServiceAuthToken string
	CollectionID     string
	Vars             url.Values
	BatchSize        int
	MaxWorkers       int
} {
	var calls []struct {
		Ctx              context.Context
		UserAuthToken    string
		ServiceAuthToken string
		CollectionID     string
		Vars             url.Values
		BatchSize        int
		MaxWorkers       int
	}
	mock.lockGetInstancesInBatches.RLock()
	calls = mock.calls.GetInstancesInBatches
	mock.lockGetInstancesInBatches.RUnlock()
	return calls
}

// PutInstanceImportTasks calls PutInstanceImportTasksFunc.
func (mock *DatasetClientMock) PutInstanceImportTasks(ctx context.Context, serviceAuthToken string, instanceID string, data dataset.InstanceImportTasks) error {
	if mock.PutInstanceImportTasksFunc == nil {
		panic("DatasetClientMock.PutInstanceImportTasksFunc: method is nil but DatasetClient.PutInstanceImportTasks was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		ServiceAuthToken string
		InstanceID       string
		Data             dataset.InstanceImportTasks
	}{
		Ctx:              ctx,
		ServiceAuthToken: serviceAuthToken,
		InstanceID:       instanceID,
		Data:             data,
	}
	mock.lockPutInstanceImportTasks.Lock()
	mock.calls.PutInstanceImportTasks = append(mock.calls.PutInstanceImportTasks, callInfo)
	mock.lockPutInstanceImportTasks.Unlock()
	return mock.PutInstanceImportTasksFunc(ctx, serviceAuthToken, instanceID, data)
}

// PutInstanceImportTasksCalls gets all the calls that were made to PutInstanceImportTasks.
// Check the length with:
//     len(mockedDatasetClient.PutInstanceImportTasksCalls())
func (mock *DatasetClientMock) PutInstanceImportTasksCalls() []struct {
	Ctx              context.Context
	ServiceAuthToken string
	InstanceID       string
	Data             dataset.InstanceImportTasks
} {
	var calls []struct {
		Ctx              context.Context
		ServiceAuthToken string
		InstanceID       string
		Data             dataset.InstanceImportTasks
	}
	mock.lockPutInstanceImportTasks.RLock()
	calls = mock.calls.PutInstanceImportTasks
	mock.lockPutInstanceImportTasks.RUnlock()
	return calls
}

// PutInstanceState calls PutInstanceStateFunc.
func (mock *DatasetClientMock) PutInstanceState(ctx context.Context, serviceAuthToken string, instanceID string, state dataset.State) error {
	if mock.PutInstanceStateFunc == nil {
		panic("DatasetClientMock.PutInstanceStateFunc: method is nil but DatasetClient.PutInstanceState was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		ServiceAuthToken string
		InstanceID       string
		State            dataset.State
	}{
		Ctx:              ctx,
		ServiceAuthToken: serviceAuthToken,
		InstanceID:       instanceID,
		State:            state,
	}
	mock.lockPutInstanceState.Lock()
	mock.calls.PutInstanceState = append(mock.calls.PutInstanceState, callInfo)
	mock.lockPutInstanceState.Unlock()
	return mock.PutInstanceStateFunc(ctx, serviceAuthToken, instanceID, state)
}

// PutInstanceStateCalls gets all the calls that were made to PutInstanceState.
// Check the length with:
//     len(mockedDatasetClient.PutInstanceStateCalls())
func (mock *DatasetClientMock) PutInstanceStateCalls() []struct {
	Ctx              context.Context
	ServiceAuthToken string
	InstanceID       string
	State            dataset.State
} {
	var calls []struct {
		Ctx              context.Context
		ServiceAuthToken string
		InstanceID       string
		State            dataset.State
	}
	mock.lockPutInstanceState.RLock()
	calls = mock.calls.PutInstanceState
	mock.lockPutInstanceState.RUnlock()
	return calls
}

// UpdateInstanceWithNewInserts calls UpdateInstanceWithNewInsertsFunc.
func (mock *DatasetClientMock) UpdateInstanceWithNewInserts(ctx context.Context, serviceAuthToken string, instanceID string, observationsInserted int32) error {
	if mock.UpdateInstanceWithNewInsertsFunc == nil {
		panic("DatasetClientMock.UpdateInstanceWithNewInsertsFunc: method is nil but DatasetClient.UpdateInstanceWithNewInserts was just called")
	}
	callInfo := struct {
		Ctx                  context.Context
		ServiceAuthToken     string
		InstanceID           string
		ObservationsInserted int32
	}{
		Ctx:                  ctx,
		ServiceAuthToken:     serviceAuthToken,
		InstanceID:           instanceID,
		ObservationsInserted: observationsInserted,
	}
	mock.lockUpdateInstanceWithNewInserts.Lock()
	mock.calls.UpdateInstanceWithNewInserts = append(mock.calls.UpdateInstanceWithNewInserts, callInfo)
	mock.lockUpdateInstanceWithNewInserts.Unlock()
	return mock.UpdateInstanceWithNewInsertsFunc(ctx, serviceAuthToken, instanceID, observationsInserted)
}

// UpdateInstanceWithNewInsertsCalls gets all the calls that were made to UpdateInstanceWithNewInserts.
// Check the length with:
//     len(mockedDatasetClient.UpdateInstanceWithNewInsertsCalls())
func (mock *DatasetClientMock) UpdateInstanceWithNewInsertsCalls() []struct {
	Ctx                  context.Context
	ServiceAuthToken     string
	InstanceID           string
	ObservationsInserted int32
} {
	var calls []struct {
		Ctx                  context.Context
		ServiceAuthToken     string
		InstanceID           string
		ObservationsInserted int32
	}
	mock.lockUpdateInstanceWithNewInserts.RLock()
	calls = mock.calls.UpdateInstanceWithNewInserts
	mock.lockUpdateInstanceWithNewInserts.RUnlock()
	return calls
}
